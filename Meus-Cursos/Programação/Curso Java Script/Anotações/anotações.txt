


        PROMPT COMANDO DICAS
------------------------------------------

code . - abe pasta selecionada

cls - limpa chat

node main.js - executa pasta main.js


                 JAVA-SCRIPT
-----------------------------------------------







  STRICT - Modo restrito
------------------------------

"use strict" 


MODO RESTRITO, SERVE PARA 
QUE VOCÊ NÃO ERRE DIGITAÇÕES ETC...




  ENCREMENTO pre incremento e pos incremento
---------------------------------------------

++C - ANTES DE EXECUTAR C ELE INCREMENTA 1

C++ - DEPOIS DE USAR C ELE INCREMENTA 1


           VARIAVEIS
------------------------------------------



VAR -  PODE MODIFICADA DE QUALQUER ESCOPO ACIMA  E
      APRESENTADA DE QUALQUER ESCOPO ACIMA OU ABAIXO 
      E MODIFICADA.

LET -    PODE SER APRESENTADA SOMENTE DE ESCOPO ACIMA E
        PODE SER MODIFICADA

CONST -   PODE SER ACESSADA SOMENTE DE ESCOPO ACIMA E NÃO 
         PODE SER MODIFICADA



              
            OPERADORES
----------------------------------------





    OPERADORES MATEMÁTICOS
------------------------------


* -  MULTIPLICAÇÃO

/ - DIVISÃO

% - MOD (RESTO DA DIVISÃO)

** - EXPOTÊNCIAÇÃO

+ - ADIÇÃO

- - SUBTRAÇÃO



   ORDEM DE PRECENDÊNCIA
==============================

1° () - QUEM ESTÁ ENTRE PARÊNTESES

2° ** - EXPOTÊNCIAÇÃO

3° / * -  DIVISÃO E MULTIPLICAÇÃO

4° + - - SUBTRAÇÃO E ADIÇÃO




  OPERADORES RELACIONAIS
--------------------------


&& - E

|| - OU

> - MAOR 

< - MENOR QUE

>= MAIOR IGUAL A

<=  MENOR IGUAL 

!= - NOT

== - IGUAL

=== -  VALOR É IGUAL?   O TIPO É IGUAL?


ORDEM DE PRECENDENCIA
=============================

1° ! || && NOT E OU 

2° TODOS OS OUTROS DA ESQUERDA PARA DIREITA


     OPERADOR TERNÁRIO
----------------------------

? - É VERDADE ? SIM OU NÃO



NUM % 2 == 0 ? 'OPÇÃO 1':'OPÇÃO2'


QUANDO VEMOS O OPERADOR TERNÁRIO (?)
DEVEMOS NOS PERGUNTAR. É VERDADE?

  ?      OU      ?

  SIM    OU     NÃO 

  1      OR     0 

'OPÇÃO1' OU  'OPÇÃO2'






        TYPEOF()
----------------------------

TYPEOF(O QUE DESEJA SABER O TIPO ) - SREVE PARA SABER O TIPO DE ALGO 


COMO ASSIM?



TIPOS:



INTEIRO - INT


BOLEANO - BOLLEAN


LOGICO - VERDADEIRO OU FALSO


STRING - CARACTERE OU LETRA '7',@@34


 lembrando que para o typeof int e bollean são considerados
Number ( número) ou seja não são diversificados com seus identificadores





            SPREED
------------------------------


 SPREED - ESPALHAR e tranformar 
um html colection em uma array(conjunto de elementos)



  SPREED SERVE PARA ESPALHAR
OS VALORES PARA AS  VARIEVIS


EX:

VAR N = [5,4,5,2,1]


FUNTION(V1,V2){
        
      RETURN V1+V2  - NOS ESPECIFICAMOS QUE TEREMOS
        SOMENTE DOIS VALORES OU SEJA
                     

}





        THIS
--------------------------------


OPERADOR THIS FICA EM FUNÇÃO DA FUÇÃO


ELE CRIA UMA VARIAVEL COM MESMO NOME QUE A FUNÇÃO
PARA GUARDAR O VALOR DA FUNÇÃO EX:

FUNTION ALUNO(NOME,NOTA){

    THIS.NOME = NOME
    THIS.NOTA = NOTA
     
    RETURN CONSOLE.LOG(NOME),CONSOLE.LOG(NOTA)
}

ALUNO('Brunno',100)










   
                 FUNÇÕES
---------------------------------------------





    FUNÇÕES PARAMETRIZADAS
--------------------------------



 SÃO FUNÇÕES CUJO VOCÊ PASSA PARAMETROS 
PARA ELA.




EX:



FUNCTION NOME( ){ 

   FUNÇÃO NORMAL SEM PARAMETRO

}

FUNCTION NOME(NOME1, NOME2){
 
     FUNÇÃO PARAMETRIZADA RECEBANDO 2 NOMES

}




      FUNÇÕES ANONIMAS
------------------------------------



 NÃO POSSUEM NOME PORTANDO DEVEM
ESTAR RELACIONADAS A UMA VARIAVEL


EX:

FUNCTION SOMA(){ 

   - FUNÇÃO NORMAL COM NOME SOMA
}


VAR NOME = FUCNTION(){

    - FUNÇÃO ANONIMA DA VARIAVEL NOME

}


    FUNÇÕE COM RETORNO
---------------------------

SÃO FUNÇÕES QUE TEM UM RETORNO A SER CUMPRIDO 


EX:


FUNTION NOME(N1,N2){ 
  
      FUNÇÃO PARAMETRIZADA RECEBANDO 2 NOMES
    SEM NENHUMA FUNCIONALIDADE


}

FUNCTION NOME(N1,N2){
  
  RETURN CONSOLE.LOG(N1,N2)

     FUNÇÃO COM RETORNO OU SEJA QUANDO
    FOR CHAMADA SERÁ APRESENTADO NA TELA DOIS NOMES

}




CONSOLE.LOG(NOME("Brunno","Maria"))


-----CONSOLE--------

Brunno, Maria

-----------------




             REST
--------------------------------------------



  REST SERVE PARA QUE EU NÃO PRECISE 
EXPRECIFICAR A QUANTIDADE DE PARÂMETROS
QUE VEM DENTRO DA FUNÇÃO EX:





FUNCTION(N1,N2){

 -  AQUI PASSAMOS 2 PARAMETROS OU SEJA SÓ
  PODERÁ SER MANUSEADO 2 VALORES

}


     USANDO O REST
---------------------



FUNCTION(...VALORES){

  -   NOS NÃO ESPECIFICAMOS QUANTOS VALORES IRÃO VIR PARA 
    DENTRO DA VARIAVEL VALORES
    OU SEJA PODE SER 10,1000,UM QUARENTAMILVALORES


}



        FUNÇÕES GERADORAS
---------------------------------------


RECONHECIDAS POR * ASTERISCO


FUNCTION* CORES(){
      YIELD 'BLUE' RETORNO "VALOR"
      YIELD 'RED'- RETORNO "VALOR

}


CONST VARIAVEL = CORES()

CONSOE.LOG(VARIAVEL.NEXT().VALUE) ESCREVA 
  NO CONSOLE O PROXIMO VALOR DA VARIAVEL







        METODOS                   
-----------------------------------





 SETIMEOUT(TEMPO)
---------------------


 SERVE PARA CRIAR UM ATRAZO 
 DE EXECUÇÃO COM DETERMINADO
TEMPO PASSADO POR PARAMETRO




  CREATE ELEMENT
----------------------

CREATEELEMENT(NOMEDOQUEQUERCRIAR)

 CRIA UM ELEMNTO HTML NA MEMÓRIA DO

 COMPUTADOR



  SET ATRIBUTE
----------------------

 SETATRIBUTE('PAR1','PAR2')

 PAR1 - ATRIBUTO

 PAR2 - CONTEUDO DO ATRIBUTO


  APPENDCHILD()
----------------------

nomeDoPai.APPENDCHILD()


 PARA ADICONAR ALGO COMO FILHO 

BASTA PASSAR O NOME DO ELEMENTO

PAI + APPENDCHILD(NOMEELEMENTOFILHO)

ex:
  var div = document.crateelement('div);
  body.appendchild(div);

        MAP
-------------------

Explicação
------------
O metodo map pecorre
uma array por inteiro 
pegando cada um dos 
elementos.

Funcionamento
-------------

MAP(PAR1,PAR2,PAR3)


Parâetros
------------

PAR1 - ELEMENTO

PAR2 - INDICE

PAR3 - ARRAY


       REMOVE
----------------------

Explicação
------------

O metodo remove necessita 
do elemento pai do qual 
você deseja remover o filho 
e também necessita do elemento
filho que irá ser removido

Funcionamento
--------------

PAI.REMOVE(PAR1)


Parâmetros
-------------

PAR1 - ELEMENTO QUE DESEJA REMOVER

  FILTER  
------------

Explicação
-------------

Filtra elementos de uma
array e cria uma nova array
com somente  os  elementos que
você deseja trabalhar

Funcionamento 
---------------
idades = [3,2,3,4,6]

let f = idades.filter(V,I,A)=>{
  return v >= 18

}

Parâmetros
---------------

V - valor 

I - indIce

A - array



   FIND
-------------

PERMITE PESQUISAR OS
ELEMNTOS DE UMA ARRAY 
E RETORNA O PRIMEIRO 
ELEMENTO ENCONTRADO DE
ACORDO COM SUA PESQUISA

Funcionamento
----------------

NomeDaVariavel.find((E,I,A)=>{
  return el == 18
  
})

Parâmetros
---------------

E - elemento 

I - indice 

A - array


   Every
------------

Explicação
-----------
ELe procura saber se 
todos elementos da array 
estão de acordo com a regra 
expecificada. 


Funcionamento
---------------

array.every((E,I,A)=>{
  if(el == 18){
    console.log("Todos são igual a 18")
  }else{
    console.log("Não são todos igual a 18")
  }
  
})


Parâmetros
------------

E - Elemento

I - indice 

A - array 


 SOME
-----------

Explicação
------------
Quando um valor do array 
concedir com elemento você
está procurando ele retornara
o elemento


Funcionamento 
---------------

NomedaArray.some((E,I,A)=>{
  return el == 18
})




Parâmetros
---------------

E - elemento

I - indice 

A - array 


 Reduce
--------------

Explicação
-----------

Com o reduce nós  podemos
reduzir uma  array.

Funcionamento
---------------

NomeDaArray.reduce((P,E,I,A)=>{

})


Parâmetros
-------------

P -  Elemento anterior

E -  Elemento atual

I -  Indice

A -



 STOP PROPAGATION
---------------------

Explicação
-------------
UMA DIV FUNCIONA COMO
UMA BOLHA E QUANDO ADICIONAMOS 
UM EVENTO A ELA, QUERENDO OU NÃO
OS ELEMNTOS QUE ESTIVEREM DENTRO DESTA
DIV RECEBERAM O EVENTAO TABEM PARA ISSO
EXISTE O stopPropagation




Funcionamento
--------------

elemento.addenventlistener('click',(evento)=>{
      evento.stopPropragation()


})


 Iteradores
-----------------
Iteradores são o que os 
metodos usam para nos dar
o resultado desejada por exemplo
o próximo elemento etc..

let iterador = NomedaArray[Symbol.in=terator]()

Funções 
----------
.next()

======================
      ARRAYS
======================
* Strings
* Números
* Objetos 
* Funções

Definição de array:
---------------------
Coleção de dados
criando entre conchetes

Como usar
------------------
let array1 = [".","..","..",23,22.3]

Podemos misturar diversos 
tipos dentro d euma array ex: 
tipo inteiro,flutuante ou strings etc..

   Adicionando/removendo
---------------------------

array.push("o que?") - adiconar o que? 

array.pop() - remove o ultimo elemento da array

array.unshift() - adicona um elemento na 1° posição da array

array.shift() - remove o elemento do inicio da array

Elementos para praticidade
---------------------------

OFSETTOP - SERVE PARA PEGAR A 
           ALTURA EM PIXELS ENTRE 
           O ELEMENTO E O PAI E O 
           FILHO

ONSCROLL - BARRA DE ROLAGEM LIGADA ou acionada


SCROOLY - ALTURA DA VERTICAL



FUNCIONAMENTO DO DOM
-------------------------------

ELEMENT - Elemento

CHILDREN - Filho

PARENT - Pai

SIBLINGS - Irmãos misturados 

NEXT SIBLIGS - Primeior irmão

PREVIOUS SIBLINGS - Próximo irmão 

FIST CHILD - Primeiro final c

LAST CHILD - Ultimo filho


   ADD ANTES DE ALGO
-------------------------
O insert before serve para 
inserirmos algo antes de algo

Parâmetros
---------------   

NomeContainer.insertbefore(par1,par2)

par1 - ADICONAR QUEM?

par2 - ANTES DE QUEM?


  ADD ALGO DEPOIS DE ALGO
--------------------------
Para adicionar algo depois de
algo teremos que ultilizar o dom

ex: 
  <html> 
    <head>

    </head>

   <body>
       <div id='d1'>

       </div>
       <div id='d3'>

       </div>
   </body>

  </html>

Digamos que eu queria inserir algo 
depois da div de identificador ('d1')

basta eu ultilizar os elementos dom 

Observe:
   <script>
      let body = docume.getElementByTagName('body');
      let div1 = document.getElementById('d1');
      let div2 = document.createElement('div');
      div2.setAtribute('id','d2')
      let proximoirmao = div1.nextsibling
      body.insertbefore(div2, proximoirmao)



      


   </script>

na linha 0 eu busquei o elemento pai no caso BODY
na linha 1 eu busquei a div 1
na linha 2 eu criei uma div 
na linha 3 eu dei um atrbuto id para ela (d2)
na linha 4 eu peguei o proximo irmao da div1 (d3)
na linha 5 eu inseri a  (d2)  antes do proximo irmao (d3)

resultado:
    <html> 
      <head>

      </head>

   <body>
       <div id='d1'>

       </div>
       <div id='d2'>

       </div>
       <div id='d3'>

       </div>
   </body>

  </html>

===============================
        Coleção MAP 
==============================

Mapeamento de valores 
através de chave e valor 
ou keys and value 

Estrutura 
-----------
const NomeVariavel = new Map()


Comandos
-----------

NomeVariavel.set("para1","para2") - adicionar um elemento

para1 - Chave,para2 - Valor 


NomeVariavel.size - tamanho da coleção

NomeVariavel.get("chave") - obter a valor da chave(x)

NomeVariavel.has("Chave") - Tem a chave?

NomeVariavel.delete("Chave") - deletar iten cuja a chave é(tal)

==========================
       Coleção SET 
==========================

Semâtica
-----------
A coeleção set não permite
entradas  duplicadas.


 sintaxe
-----------
const setando = new Set()


 comandos 
------------

setando.add("O que?") - adcionar o que?

========================
  Templates strings 
========================

 Semâtica 
------------
 Feito para não precisar de usar concatenação 
ultilizando o operador (+)

exemplo: 
    "Meu nome é" +nome
 Agora com o template strings ficou mais 
fácil basta usarmos apóstrofos e o símbolo
${variavel}

exemplo:
  `Meu nome é ${nome}`

 sintaxe
------------

const nome = "Um nome qualquer"

console.log(`Meu nome é ${nome}`)


===============================
  Objetos em Java-Script
===============================
