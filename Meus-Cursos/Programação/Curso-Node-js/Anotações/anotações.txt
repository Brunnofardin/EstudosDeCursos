===================================
        Curso node js
====================================

         Http
----------------------------

Protocolo que permite 
trabalhar com requisição 
e respota.

  Requerindo http
------------------
const http = require("http")

  Criar servidor
------------------
.createServer((requisição,resposta)=>{

})

texto
----------------

text/plain - texto normal

text/html - texto html

head
----------------
writeHead(200,{

  'containt-Type','text/plain'

});

Ultilitários
------------------

.write("texto") - escrever resposta

.end("") - finalizar resposta

.url - conteudo da url

      Rotas
--------------------------
.url

ex:
  if(requisição.url == ''){
     resposta.write("olá")
  }


===========================
      MODULOS
===========================

---------------------------
         FS
---------------------------

File system serve para 
ler,editar e copiar arquivos

Ultilitários
-------------

fs.readFile('./trajeto../',(err,arquivo)=>{ - Ler arquivo


}) 

fs.appendFile('nomedoarquivo.txt','conteudo',(err)=>{


})
-------------------------
      EXPRESS
-------------------------

O express serve para criar 
rotas com mais facilidades


Instalação
-------------

Prompt
---------
Estando já na pasta de seu projeto
use o comando pelo prompt comando:

npm install express --save

Vsc
----------
const express = require("express");
const app = express();


Ultilitários
-----------------
app.get("rota",função(requisição,resposta){

})

res.send("") - mandar conteudo


====================================
   Modulorização de elementos
====================================

Nada mais é do que você juntar o seu 
código, por em uma caixa de ferramentas,
e usá-lo quando for preciso.

Passagem de parâmetros
------------------------
elemento.get('/rota:parâmetro'(req,res)=>{
       req.parms.parâmetro

})

Sintaxe
----------
const express = require('express') - modulo express
const rotas = express.Router(); - express rotas


rotas.get('/',(req,res)=>{ - requisição,resposta
    res.json({ola:'Seja bem vindo'})

})

rotas.get('/:cursoid',(req,res)=>{
    const curso = req.params.cursoid - parâmetros

})

module.exports = rotas

=============================
  Comandos node js
=============================

__dirname - diretório atual

res.sendFile("caminho do arquivo") - setar arquivo

==========================================
    Ligação com banco de dados (prompt)
==========================================

Tipos primitivos
------------------

CHAR - Um único caractere

VARCHAR(QTD_MÁX) - Cadeia de caracteres

INT - Tipo inteiro



Baixar mysql comunit server
=-=-=-=-==-=-=-=-=-=-=-=-=-=
Entrando no mysql (prompt)
----------------------------
Para entrar no banco de dados 
pleo prompt usamos o cmd :

-u -h - p

-u : usuário 

-h : host 

-p : senha 


Prática
----------
-u root -h localhost -p 263534553#@


=============================
 Lidando com banco de dados
=============================

=-=-=-=-==-=-=-=-=-=-=-=-=
  Vendo banco de dados 
------------------------- 
SHOW DATABASES;

=-=-=-=-==-=-=-=-=-=-=-==
  Usando banco de dados
--------------------------
USE NomDoBanco;

=-=-=-=-==-=-=-=-=-=-=-==
  Criando banco de dados 
-------------------------
CREATE DATABASE NomeDoBanco;

Semâtica 
----------
Criar banco de dados com nome tal.

=-=-=-=-==-=-=-=-=-=-=-=-=
     Criando tabela
--------------------------
CREATE TABLE NomeDatabela(
  Coluna1 tipo,
  Coluna2 tipo, 
  COluna3 tipo 
);

Semâtica 
----------
Criar tabela tal com as colanas e tipos 
tais  abaixo(

);
=-=-=-=-==-=-=-
Vendo tabelas 
---------------
SHOW TABLES;

semâtica 
-----------
Ver tabelas

=-=-=-=-==-=-=-=-=-=-=
   Descrevendo tabela
----------------------
DESCRIBE NomeDaTabela;

Semântica
-----------
Descreva a tabela tal

ex:
  Tipo 
  Tamanho etc..
  Informações da tabela

=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=
  Selecionando itens da tabela
--------------------------------

Todos dados
-------------
SELECT* FROM NomeDatabela;

Semântica
----------

Selecione todos os dados da 
tabela tal.

Dados especifico
-----------------
SELECT* from NomeTabela where idade = 17;


Semântica 
----------

Selecione todos os dados da tabela tal 
onde o campo idade receber o valor dezesete.

=-=-=-=-==-=-=-=-=-=-=-=-=-=
  Inserindo dados na tabela 
============================
INSERT INTO NomeDatabela(CampoX,Campo,YCampoZ) VALUES(
  "Campox",
  "CampoY",
  "CampoXZ"
);

Semântica 
-----------
Inserir na Tabelatal nos campos tais os valores tais.

=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=
  Deletado Registros da tabela 
================================
DELETE FROM NomedaTabela  WHERE condição;

condição?
==========
ex:
  nome = "Eduardo"
  onde nome receber eduardo 

  :
  WHERE nome = edurado;

Semâtica
----------
Delete da tabela tal onde a condição tal for verdade;

=-=-=-=-==-=-=-=-=-=-=-=-=-=
    Altulizando Registros
===========================

UPDATE NomeDaTabela  SET  ColunaTal = "DadoTal" WHERE Condição

condição 
========
  ex:

  idade = 17

  where idade = 17

Semântica 
-----------

Altulize a tabela tal setando o dado tal 
somente onde o dado = condição;


=============================================
    Lidando com sequelize (Node Js)
=============================================

  Instalação (prompt)
-----------------------
npm install --save sequelize

npm install --save mysql2


  Tipos de textos 
===================
TEXT - Texto limitado 

STRING - Texto ilmitado

INTEGER - Inteiro 

=============================
 Se conectando com sequelize 
=============================

Blibioteca
--------------
const sequelize require(""sequelize");


conectando
--------------
const conexao = new sequelize("NomeDoBanco","Usuário","Senha",{

  host:QualServidorEstáRoadando ex: 'localhost',

  dialct:TipoDeBanco ex: 'mysql'

})


conexao.authenticate().then(()=>{

  conosle.log("Banco conectado")

}).catch((err)=>{

  console.log("Erro: "+err)
})


============================
  Criando tabelas sequelize
============================
const tabela = sequelize.define("Nometabela",{
  campo1:{

    tipo: Sequelize.STRING
  },
  campo2:{

    tipo: Sequelize.TEXT
  }
})

tabela.sincy(force:true)

============================
    Inserindo dados 
============================

tabela.create({

  campo1: "Dado...",
  campo2: "Dado..."

})


===========================
Recomendações para backend
============================


Npm
-------

https://www.npmjs.com/

Cat 
-------

https://http.cat/

Handelbas 
----------

https://handlebarsjs.com/