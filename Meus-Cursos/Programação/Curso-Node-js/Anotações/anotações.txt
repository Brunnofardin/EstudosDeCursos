===================================
        Curso node js
====================================

-----------------------------------
      Exibindo mensagem
-----------------------------------
 Para exibir uma mensagem em Node 
Js ultilizamos o comando :
 
  Conosle.log("")  

Dentro dos apóstrofos colocamos 
a mensagem a ser exibida. Exemplo:

  Conosle.log("Hellow Word")

-----------------------------------
       Modulariação
-----------------------------------

 Para fazer uma modularização nós 
separamos arquivos com funções 
diferentes por exemplo:
  
  operadores >
     > calcular.js
        var soma = function(n1,n2){
            return n1+n2  
        }
     > subtrair.js 
        var subtrair = funtion(n1,n2){
            return n1-n2
        }
     > multiplicar.js 
         var multiplicar = funtion(n1,n2){
           return n1*n2
        }
  app.js

 Para eu usar os operadores de 
calculo,subtraçção e multiplicação dentro 
dos 3 arquivos, eu devo exportar as variveis
que possuem suas funções.
-------------       
  comando
-------------
module.exports = {O que ?}

--------------
   Exemplo
--------------

operadores >
    calcular.js 
       module.exports = soma
    subtrair.js
       module.exports = subtrair
    multiplicar.js 
       module.exports = multiplicar

Depois basta eu requerir estes 
arquivos na minha aplicação principal

ex:
  
  app.js >
     const calcular = require('./operadores/calcular');
     const subtrair = require('./operadores/subtrair);
     const multiplicar = require('./operadores/multiplicar)
     
     const resultado_soma = calcular.soma(n1,n2)
     const resultado_subtração = subtrair.subtrair(n1,n2)
     const resultado_multiplicação = multiplicar.multiplicar(n1,n2) 

-----------------------------------
            Rotas
-----------------------------------

Framework - facilitador 

======================== 
        express 
========================

 Instalação
-----------------
Ache a pasta do seu projeto

ex: cd: C:User:Useradm/projeto01

Depois execute o dowloader:

    (prompt comando)
  --------------------
 npm install --save express 


 Importando modulo
-------------------

const express = require('express');
const app = express() - funcionalidades 
                           express

  Funcionalidades
-------------------

  Rotas
---------

app.get("/",função(par1,par2){

})

 / - rota raiz

função - function(){}

par1 - requisição

par2 - resposta 

 Exibir HTMl
----------------
 Primeiro devemos ter o 
arquivo html

html >
  index.html >
     <html>
       <head>
           <title></title>
       </head>
       <body>
           <h1>Arquivo HTMl</h1>
       </body>
     </html>


 Rota pradrão
---------------

const express = require('express');
const app = express();


app.get('/home'(req,res)=>{
  res.sendFile(__dirname+"/html/index.html")

})

__ dirname - Diretório atual

/arquivo/arquivo - entrar na pasta

 Adiconando  extras 
-------------------
app.use(express.static(__dirname+"/css"))

<link href='main.css'>

use - ultilize

static - local estático/diretório

===================================
         Body Parser
===================================

 Instalação
------------
npm install --save body-parser

 Ultilidades
---------------
Serve para coletar dados
de formulários ou de 
requisições



 Dados de requisições
------------------------
const bodyParser = require('body-parser')

app.use(bodyParser.json())
   use body parser no formatdo json

app.use(bodyParser.urlencoded({extend:false}))
    use body parser para url extensão falsa



   Dados de formulários 
--------------------------

Para acessar dados do formulario
usamos a requisição.body.nomeDoCampo 

Nome do campo cujo quer pegar o dado 




===================================
         Handdlebars
===================================

  Instalação
---------------

npm install --save express-handlebars 

const handlebars = require('handlebars');

app.engine('handlebars',handlebars.engine({defaltLayout:"main"});)
  Use o handlebars definindo como layout padrão o MAIN 

app.set('view engine','handlebars')
  use a view configuração de handle bars

app.set('views','./views')
  use a pasta views ./views

O handlebars serve para trabalhar com 
fontend mais ele implementa funcionalidades 
novas para o nosso front end 
por exemplo estruturas de repetição 
exibição de varivaies etc....



===================================
        Middlewares
===================================

  Semâtica 
--------------
Middleware é responsavel por intermediar 
todas as requisições que o usuário fizer

  Sintaxe
--------------
app.use((req,res,next)=>{
  requisição - req,
  resposta -res ,
  próximo - next.

})


=================================== 
           Sessões 
===================================

 Instalação
--------------


  Semâtica 
------------- 


   Sintaxe 
---------------








===================================

===================================


===================================
           Mongo db
===================================

         Conexão
=-=-=-=-=-=-==-=-=-=-=-=-=-=-=

const mongoose = require('mongoose')

mongoose.connect('mongodb://127.0.0.1/NomeDaColeção').then(()=>{

}).catch(()=>{

})

      Listando dados 
=-=-=-=-=-=-==-=-=-=-=-=-=-=-=

coleção.find().sort({date:'desc'}).lean().then((arquivo)=>{
  res.render(arquivo')

})

        Buscando dados 
=-=-=-=-=-=-==-=-=-=-=-=-=-=-=

coleção.findOne({campoX:CampoY}).then((arquivo)=>{

})

Semâtica 
------------

Procure um elemento 
da coleção onde o campoX 
tenha o valor do campo Y 
e passe este resultado para 
minha função then
 


     Removendo dados 
=-=-=-=-=-=-==-=-=-=-=-=-=-=-=
coleção.deleteOne({campoX:CampoY}).then(arquivo)=>{

}

Semâtica 
----------
Remova da coleção o campoX que
tenha o valor igual ao campoY



  Listando posts referênciados
=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-

Posts rferêciados são aqueles cujo 
dentro de um modelo qua não faz
parte dele chama ele 

por exemplo:
   
   Temos o models postagens e o model categorias 
   
   const Catgorias = new mongoose.Schema({
      Nome:{
        type:string
      },
      Slug:{
        type:string

      }
   })
   mongoose.model('categorias',catgorias)

   const Postagens = new mongoose.Schema({
     Titulo:{
       type:string
     },
     Descrição:{
       type:string
     }
     Categoria{
        type:Schema.types.ObjectId,
        ref:'catgorias'
     }
   })
   mongoose.model('postagens',Postagens)

Pareceba que, referêciamos a categoria no nosso 
model postagens, usando o comando (ref:'categorias')
agora conseguimos lidar com as categorias, mesmo 
não estando usando o model categorias,podemos pegar elementos 
e trabalhá-los.

Postagens.find().populate("Categoria").sort({date:'desc'}).lean().then((arquivo)=>{

       // variavel contendo os dois models
       
       const arquivo = arquivo
        
       // categorias

       console.log(arquivo.Slug)
       console.log(arquivo.Nome)

       // Postagens 

       console.log(arquivo.Titulo)
       console.log(arquivo.Descrição)

}).catch((err)=>{
    
})

===========================
     bcryptjs
===========================

Blibioteca para criptografar senhas 

intalação 
-----------

npm install --save bcryptjs 

 como usar 
--------------


===========================
        passport
===========================

 Intalação 
---------------
npm i --save passport

npm i --save passport-local

   Uso Local
---------------


  Classes Bootstrap 
=========================


  Botões
============

class='btn btn-success' - cria um botao verde 

class ='btn btn-danger'- cria um botão vermelho

  Formulários
===================

class='form-control' - deixa inouts mais bonitas 

class='card'  - cria um card 

class='card-body' - cria um corpo de card

class='costum-select' - deixa o select mais bonito

class='mt-4' - Dá um espaço da cabeça do iten até o header

  Alertas
================
class ='alert alert-danger' - exibir mensgaem de erro

class ='alert alert-success' - exibir alerta de sucesso